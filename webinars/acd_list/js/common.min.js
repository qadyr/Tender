"use strict";

document.addEventListener("DOMContentLoaded", function (event) {
  // accordions logic
  var accordions = document.querySelectorAll('.accordion');
  accordions.forEach(function (accordion) {
    var info = accordion.querySelector('.accordion__info');
    info.addEventListener('click', function (e) {
      var isOpened = accordion.classList.contains('accordion__open');

      if (isOpened) {
        accordion.classList.remove('accordion__open');
      } else {
        accordion.classList.add('accordion__open');
      }
    });
  }); // tooltip

  var body = document.querySelector('body');
  var tooltip = document.querySelector('.tooltip__text');
  body.addEventListener('scroll', function () {
    tooltip.classList.add('hide');
  });
  body.addEventListener('click', function () {
    tooltip.classList.add('hide');
  }); // live events

  var currentTime = Date.now();
  var els = document.querySelectorAll('[data-start]');
  els.forEach(function (node) {
    var startTime = node.dataset.start;
    var endTime = node.dataset.end;
    var link = node.dataset.link;

    if (!startTime || !endTime) {
      return;
    }

    if (currentTime <= endTime && currentTime >= startTime) {
      var checkEl = node.querySelector('.accordion__check');
      checkEl.innerHTML = "<a href=\"".concat(link ? link : '#', "\" target=\"_blank\"  class=\"onair\"></a><a href=\"").concat(link ? link : '#', "\" target=\"_blank\" class=\"live\">LIVE</a>");
    }
  }); // intersection observer

  var options = {
    root: null,
    rootMargin: '0px',
    threshold: 1
  };
  var target = document.querySelector('#btn_block');
  var subTarget = document.querySelector('.buttons'); // функция обратного вызова

  var callback = function callback(entries, observer) {
    entries.forEach(function (entry) {
      // если элемент является наблюдаемым
      if (entry.isIntersecting) {
        var _target = entry.target; // выводим информацию в консоль - проверка работоспособности наблюдателя

        console.log(_target); // меняем фон контейнера

        subTarget.classList.remove('ac');
      } else {
        // меняем фон контейнера
        subTarget.classList.add('ac');
      }
    });
  }; // наблюдатель


  var observer = new IntersectionObserver(callback, options);
  observer.observe(target);
});